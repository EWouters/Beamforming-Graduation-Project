package com.googleproject.basicplayerrecorder;


import android.app.Activity;
import android.os.Bundle;
import android.os.Environment;
import android.widget.ToggleButton;
import android.view.View;
import android.util.Log;
import android.media.AudioRecord;
import android.media.AudioFormat;
import android.media.MediaRecorder;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;


public class PlayerRecord extends Activity  
{
	
	private static final String LOG_TAG = "BasicPayerRecord";
    private static String mFileName = null;

//    private MediaRecorder mRecorder = null;

	
	private static final int RECORDER_SAMPLERATE=16000;
	private static final int RECORDER_CHANNELS=AudioFormat.CHANNEL_IN_MONO;
	private static final int RECORDER_AUDIO_ENCODING=AudioFormat.ENCODING_PCM_16BIT;
//
	private AudioRecord recorder=null ;
//	private int bufferSize=0;
	private Thread recordingThread = null ;
	private boolean isRecording = false ;
//	short [] recordData ;

	int BufferElements2Rec = 1024; // want to play 2048 (2K) since 2 bytes we use only 1024
	int BytesPerElement = 2; // 2 bytes in 16bit format

	private void startRecording()
	{

		recorder = new AudioRecord(MediaRecorder.AudioSource.MIC,RECORDER_SAMPLERATE,RECORDER_CHANNELS,RECORDER_AUDIO_ENCODING,BufferElements2Rec*BytesPerElement);
	    recorder.startRecording();
	    isRecording = true;
	    recordingThread = new Thread(new Runnable() {
	        public void run() {
	            writeAudioDataToFile();
	        }
	    }, "AudioRecorder Thread");
	    recordingThread.start();
	}
	
    //convert short to byte
	private byte[] short2byte(short[] sData)
	{
		int shortArrsize = sData.length;
		byte[] bytes = new byte[shortArrsize * 2];
		for (int i = 0; i < shortArrsize; i++)
		{
			bytes[i * 2] = (byte) (sData[i] & 0x00FF);
			bytes[(i * 2) + 1] = (byte) (sData[i] >> 8);
			sData[i] = 0;
		}
    return bytes;

	}

	
	private void writeAudioDataToFile()
	{
	    // Write the output audio in byte
        mFileName = Environment.getExternalStorageDirectory().getAbsolutePath();
        mFileName += "/audiorecordtest.wav";

	    short sData[] = new short[BufferElements2Rec];

	    FileOutputStream os = null;
	    try
	    {
	    	os = new FileOutputStream(mFileName);
	    }
	    catch (FileNotFoundException e)
	    {
	    	Log.e(LOG_TAG, "File Not Found");
	        //e.printStackTrace();
        }
	    
	    while (isRecording)
	    {
	        // gets the voice output from microphone to byte format
	        recorder.read(sData, 0, BufferElements2Rec);
	        System.out.println("Short writing to file" + sData.toString());
	        try
	        {
	            // // writes the data to file from buffer
	            // // stores the voice buffer
	            byte bData[] = short2byte(sData);
	            os.write(bData, 0, BufferElements2Rec * BytesPerElement);
	        }
	        catch (IOException e)
	        {
	        	Log.e(LOG_TAG, "Error while writing");
	           // e.printStackTrace();
	        }
	    }
	    
	    try
	    {
	        os.close();
	    }
	    catch (IOException e) {
	    	Log.e(LOG_TAG, "Error while closing the file");
	        //e.printStackTrace();
	    }
	}
	
	
	private void stopRecording() {
	    // stops the recording activity
	    if (null != recorder) {
	        isRecording = false;
	        recorder.stop();
	        recorder.release();
	        recorder = null;
	        recordingThread = null;
	    }
	}
	
	
//    private void startRecording() {
//        mRecorder = new MediaRecorder();
//        mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
//        mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
//        mRecorder.setOutputFile(mFileName);
//        mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
//
//        try {
//            mRecorder.prepare();
//        } catch (IOException e) {
//            Log.e(LOG_TAG, "prepare() failed");
//        }
//
//        mRecorder.start();
//    }

//    private void stopRecording() {
//        mRecorder.stop();
//        mRecorder.release();
//        mRecorder = null;
//    }	
	

	
	
    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_player_record);
//        bufferSize = AudioRecord.getMinBufferSize(RECORDER_SAMPLERATE,RECORDER_CHANNELS,RECORDER_AUDIO_ENCODING);
//        recordData = new short [bufferSize];
//        mFileName = Environment.getExternalStorageDirectory().getAbsolutePath();
//        mFileName += "/audiorecordtest.3gp";

    }

    public void onToggleClicked( View v )
    {
    	boolean on = ((ToggleButton) v).isChecked();
        
        if(on)
        {
        	startRecording();
        }
        else
        {
        	stopRecording();  
        }
    }

//    private void startRecording()
//    {
//    	recorder = new AudioRecord(MediaRecorder.AudioSource.MIC,RECORDER_SAMPLERATE,RECORDER_CHANNELS,RECORDER_AUDIO_ENCODING, bufferSize);
//    	recorder.startRecording();
//    	isRecording = true;
//    
//    
//    recordingThread = new Thread (new Runnable() {
//    	  							@Override
//	  								public void run (){
//    	  								gatherData ();
//	  								}
//	  							},"AudioRecorder Thread");
//    recordingThread.start();
//    
//	}
//    
//    private void gatherData ()
//    {
//		while(isRecording)
//		{
//    	  recorder.read(recordData,0,bufferSize) ;
//    	}
//    }
//    private void stopRecording()
//    {
//    	if ( recorder != null)
//    	{
//    	    isRecording = false;
//    	    recorder.stop();
//    	    recorder.release();
//    	    recorder=null;
//    	    recordingThread=null;
//    	}
//    }

}
