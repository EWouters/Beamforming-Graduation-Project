function [source_reb, interf_reb, h]=simulatescenarioBAP(Nmics,Ninterf,sound_vel,fs,sim_l,mics_pos,louds_pos,room_dim,alphas,L_b,dims,hsiz,source,interf,plotflag)
% SIMULATESCENARIO  Function to simulate an acoustic scenario for the
% beamforming process.
% Author: dr. Jorge Martinez (J.A.MartinezCastaneda@TuDelft.nl).
%
% Nmics - number of microphones
% Ninterf - number of interfering sources
% sound_vel - speed of sound
% fs - sample rate
% sim_l - length of simulation? input is unused
% mics_pos - positions of microphones
% louds_pos - positions of loudspeakers
% room_dim - room dimensions, default: [6.85 3.95 3.2]
% alphas - Reflection factors, defaults: [0.54 -0.56 0.58 -0.53 -0.55 0.57]
% L_b - length of half fft block?   default: 2048
% dims - defaults: dims = reverb.*ones(1,3);, reverb: false
% hsiz - length of hamming window, default: hsiz = 0.064;  
% source - unknown variable ????
% interf - unused, but generated by: , where excpid is unknown
%   excerpts = getexcerpsBAP('retrieve',Ninterf+1,fs,sim_time,opsc,excpid);
% plotflag - flag, enable to plot impulse response

h = rir_generator_x(sound_vel,fs,mics_pos,louds_pos,room_dim,alphas,L_b,'o',-1,dims,0,false,true,hsiz);



if plotflag
    tax = (0:L_b-1)./fs;
    figure(2);
    clf;
    subplot(2,1,1);
    plot(tax,h(:,1,1),'b');
    grid on;
    axis tight;
    subplot(2,1,2);
    plot(tax,20.*log10(abs(h(:,1,1)./max(abs(h(:,1,1))))),'b');
    grid on;
    axis tight;
end

source_reb = fftfilt(h(:,:,1),source);
interf_reb = zeros(sim_l,Nmics);
for nint = 1:Ninterf;
    interf_reb=interf_reb+fftfilt(h(:,:,nint+1),interf(:,nint));
end

return